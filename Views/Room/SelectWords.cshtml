@{
    ViewBag.Title = "Kategori ve Kelime Seçimi";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var categories = ViewBag.Categories as List<casus_oyunu.Models.Category>;
    var room = ViewBag.Room as casus_oyunu.Models.GameRoom;
}

@section Styles {
    <link rel="stylesheet" href="~/css/selectwords.css" asp-append-version="true" />
}

<div class="selectwords-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="selectwords-card">
                    <div class="text-center mb-4">
                        <i class="fas fa-cogs text-primary" style="font-size: 3rem;"></i>
                        <h2 class="mt-3">Oyun Ayarları</h2>
                        <p class="text-muted">Kategori ve kelimeleri seçin, oyun süresini belirleyin</p>
                        <div class="room-info">
                            <span class="badge bg-primary">Oda Kodu: @room.RoomCode</span>
                        </div>
                    </div>

                    @if (TempData["SelectError"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @TempData["SelectError"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form asp-action="SelectWords" method="post" class="selectwords-form" id="selectWordsForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="code" value="@room.RoomCode" />
                        
                        <!-- Oyun Süresi -->
                        <div class="setting-section mb-4">
                            <div class="setting-header">
                                <i class="fas fa-clock text-warning"></i>
                                <h5>Oyun Süresi</h5>
                            </div>
                            <div class="setting-content">
                                <div class="duration-selector">
                                    <input type="range" class="form-range" id="durationSlider" name="selectedDurationMinutes" 
                                           min="2" max="15" value="8" oninput="updateDurationValue(this.value)" />
                                    <div class="duration-value">
                                        <span id="durationValue">8</span> dakika
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Kategoriler -->
                        <div class="setting-section mb-4">
                            <div class="setting-header">
                                <i class="fas fa-tags text-success"></i>
                                <h5>Kategoriler</h5>
                                <small class="text-muted">En az 1 kategori seçin</small>
                            </div>
                            <div class="setting-content">
                                <div class="categories-grid" id="categoriesGrid">
                                    @foreach (var cat in categories)
                                    {
                                        <div class="category-item">
                                            <input class="category-checkbox" type="checkbox" name="selectedCategories" 
                                                   value="@cat.Name" id="cat-@cat.Name.Replace(" ", "")" />
                                            <label class="category-label" for="cat-@cat.Name.Replace(" ", "")">
                                                <div class="category-icon">
                                                    <i class="fas fa-folder"></i>
                                                </div>
                                                <span class="category-name">@cat.Name</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                                <div class="text-center mt-3" id="categoryError" style="display: none;">
                                    <p class="text-danger">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        En az bir kategori seçmelisiniz
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Kelimeler -->
                        <div class="setting-section mb-4">
                            <div class="setting-header">
                                <i class="fas fa-font text-info"></i>
                                <h5>Kelimeler</h5>
                                <small class="text-muted">Seçili kategorilerden kelime seçin</small>
                            </div>
                            <div class="setting-content">
                                <div class="words-accordion" id="wordsAccordion">
                                    @foreach (var cat in categories)
                                    {
                                        <div class="words-category" data-category="@cat.Name">
                                            <div class="category-header" data-bs-toggle="collapse" 
                                                 data-bs-target="#collapse-@cat.Name.Replace(" ", "")" aria-expanded="false">
                                                <i class="fas fa-chevron-down"></i>
                                                <span>@cat.Name</span>
                                                <span class="word-count">0 kelime seçildi</span>
                                            </div>
                                            <div class="collapse" id="collapse-@cat.Name.Replace(" ", "")" data-bs-parent="#wordsAccordion">
                                                <div class="words-grid">
                                                    @foreach (var word in cat.Words)
                                                    {
                                                        <div class="word-item">
                                                            <input class="word-checkbox" type="checkbox" name="selectedWords" 
                                                                   value="@word" id="word-@word.Replace(" ", "")" 
                                                                   data-category="@cat.Name" />
                                                            <label class="word-label" for="word-@word.Replace(" ", "")">
                                                                @word
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="text-center mt-3" id="noCategoriesMessage" style="display: none;">
                                    <p class="text-muted">
                                        <i class="fas fa-info-circle me-2"></i>
                                        Kelime seçmek için önce kategori seçin
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Butonlar -->
                        <div class="form-actions">
                            <button type="submit" class="btn btn-secondary btn-lg" disabled>
                                <i class="fas fa-save me-2"></i>Ayarları Kaydet
                            </button>
                            <a href="@Url.Action("Lobby", "Room", new { code = room.RoomCode })" class="btn btn-outline-secondary btn-lg">
                                <i class="fas fa-arrow-left me-2"></i>Lobiye Dön
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function updateDurationValue(value) {
    document.getElementById('durationValue').textContent = value;
}

function updateWordCount(categoryName) {
    const category = categoryName.replace(/ /g, '');
    const checkboxes = document.querySelectorAll(`input[data-category="${categoryName}"]:checked`);
    const countElement = document.querySelector(`#collapse-${category} .word-count`);
    if (countElement) {
        countElement.textContent = `${checkboxes.length} kelime seçildi`;
    }
}

function toggleCategoryVisibility() {
    const selectedCategories = document.querySelectorAll('.category-checkbox:checked');
    const allWordCategories = document.querySelectorAll('.words-category');
    const noCategoriesMessage = document.getElementById('noCategoriesMessage');
    
    // Tüm kelime kategorilerini gizle
    allWordCategories.forEach(category => {
        category.style.display = 'none';
    });
    
    // Seçili kategorilerin kelimelerini göster
    selectedCategories.forEach(checkbox => {
        const categoryName = checkbox.value;
        const wordCategory = document.querySelector(`.words-category[data-category="${categoryName}"]`);
        if (wordCategory) {
            wordCategory.style.display = 'block';
        }
    });
    
    // Mesaj göster/gizle
    if (selectedCategories.length === 0) {
        noCategoriesMessage.style.display = 'block';
    } else {
        noCategoriesMessage.style.display = 'none';
    }
}

// Sayfa yüklendiğinde
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing form validation');
    
    // Kategori seçimlerini dinle
    const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
    console.log('Found category checkboxes:', categoryCheckboxes.length);
    
    categoryCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            console.log('Category checkbox changed:', this.value, this.checked);
            toggleCategoryVisibility();
            validateForm();
            
            // Eğer kategori seçildiyse accordion'u aç
            if (this.checked) {
                const categoryName = this.value;
                const categoryId = categoryName.replace(/ /g, '');
                const accordionItem = document.querySelector(`#collapse-${categoryId}`);
                
                if (accordionItem) {
                    const bsCollapse = new bootstrap.Collapse(accordionItem, {
                        show: true
                    });
                }
            }
        });
    });
    
    // Event delegation ile kelime seçimlerini dinle
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('word-checkbox')) {
            console.log('Word checkbox changed:', e.target.value, e.target.checked);
            const categoryName = e.target.getAttribute('data-category');
            console.log('Category:', categoryName);
            updateWordCount(categoryName);
            validateForm();
        }
    });
    
    // Form gönderimini dinle
    const form = document.getElementById('selectWordsForm');
    console.log('Form found:', !!form);
    
    form.addEventListener('submit', function(e) {
        console.log('Form submit attempted');
        if (!validateForm()) {
            console.log('Form validation failed - preventing submit');
            e.preventDefault();
            return false;
        }
        console.log('Form validation passed - allowing submit');
    });
    
    // İlk yüklemede kategori görünürlüğünü ayarla
    toggleCategoryVisibility();
    validateForm();
    
    // Kelime sayılarını güncelle
    const categories = @Html.Raw(Json.Serialize(categories.Select(c => c.Name)));
    categories.forEach(category => updateWordCount(category));
});

function validateForm() {
    const selectedCategories = document.querySelectorAll('.category-checkbox:checked');
    const selectedWords = document.querySelectorAll('.word-checkbox:checked');
    const categoryError = document.getElementById('categoryError');
    const submitButton = document.querySelector('#selectWordsForm button[type="submit"]');
    
    console.log('=== Form Validation Debug ===');
    console.log('Selected categories:', selectedCategories.length);
    console.log('Selected words:', selectedWords.length);
    console.log('Submit button found:', !!submitButton);
    
    if (!submitButton) {
        console.error('Submit button not found!');
        return false;
    }
    
    let isValid = true;
    
    // Kategori kontrolü
    if (selectedCategories.length === 0) {
        console.log('No categories selected - showing error');
        categoryError.style.display = 'block';
        isValid = false;
    } else {
        console.log('Categories selected - hiding error');
        categoryError.style.display = 'none';
    }
    
    // Kelime kontrolü
    if (selectedWords.length === 0) {
        console.log('No words selected');
        isValid = false;
    } else {
        console.log('Words selected:', selectedWords.length);
    }
    
    // Buton durumunu güncelle
    if (isValid) {
        console.log('Form is valid - enabling button');
        submitButton.disabled = false;
        submitButton.classList.remove('btn-secondary');
        submitButton.classList.add('btn-primary');
    } else {
        console.log('Form is invalid - disabling button');
        submitButton.disabled = true;
        submitButton.classList.remove('btn-primary');
        submitButton.classList.add('btn-secondary');
    }
    
    console.log('Final validation result:', isValid);
    console.log('Button disabled:', submitButton.disabled);
    console.log('Button classes:', submitButton.className);
    
    return isValid;
}
</script> 