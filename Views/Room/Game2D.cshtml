@{
    ViewBag.Title = "Casus Oyunu - 2D";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        .game-container {
            display: flex;
            height: calc(100vh - 120px);
            background: linear-gradient(135deg, #1a1a2e, #16213e);
        }

        .game-canvas {
            flex: 1;
            position: relative;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 400px;
        }

        #gameCanvas {
            border: 2px solid #00ff88;
            border-radius: 10px;
            background: #000;
        }
        
        #gameCanvas canvas {
            display: block !important;
        }

        .game-ui {
            width: 350px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 20px;
            border-left: 3px solid #00ff88;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .player-list {
            margin-bottom: 20px;
        }

        .player-item {
            display: flex;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            border-left: 4px solid var(--player-color);
        }

        .player-avatar {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            margin-right: 10px;
            background: var(--player-color);
        }

        .timer {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .question-panel {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #00ff88;
        }

        .chat-panel {
            margin-top: auto;
        }

        .chat-messages {
            height: 200px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 8px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .chat-input button {
            padding: 8px 15px;
            background: #00ff88;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .voting-panel {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #ff6b6b;
        }

        .voting-panel button {
            display: block;
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            background: #ff6b6b;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .question-form {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #00ff88;
        }

        .question-form textarea {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            resize: vertical;
            min-height: 80px;
        }

        .question-form select {
            width: 100%;
            padding: 8px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            margin-bottom: 10px;
        }

        .question-form button {
            width: 100%;
            padding: 10px;
            background: #ff6b6b;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .game-controls {
            margin-top: 20px;
        }

        .game-controls button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            background: #00ff88;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }

        .chat-message {
            margin: 5px 0;
            padding: 5px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.1);
        }

        .chat-message .sender {
            font-weight: bold;
            color: #00ff88;
        }
    </style>
}

<div class="game-container">
    <div class="game-canvas">
        <div id="gameCanvas"></div>
    </div>
    
    <div class="game-ui">
        <div class="timer">
            <div id="timeRemaining">08:00</div>
        </div>
        
        <div class="player-list">
            <h4>Oyuncular</h4>
            <div id="playerList">
                @if (ViewBag.Participants != null)
                {
                    @foreach (var participant in ViewBag.Participants)
                    {
                        var playerPositions = ViewBag.PlayerPositions as List<dynamic>;
                        var position = playerPositions?.FirstOrDefault(p => p.RoomParticipantId == participant.Id);
                        var color = position?.Color ?? "#FF0000";
                        <div class="player-item" data-player-id="@participant.Id">
                            <div class="player-avatar" style="background: @color;"></div>
                            <div>
                                <strong>@participant.User.UserName</strong>
                                @if (participant.Id == ViewBag.GameSession?.CurrentQuestionerId)
                                {
                                    <span class="badge bg-warning">Sıra</span>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        
        <div class="question-panel" id="questionPanel" style="display: none;">
            <h4>Soru:</h4>
            <p id="currentQuestion"></p>
            <p id="currentAnswer" style="display: none; color: #00ff88;"></p>
        </div>
        
        <div class="question-form" id="questionForm" style="display: none;">
            <h4>Soru Sor</h4>
            <select id="targetPlayer">
                @if (ViewBag.Participants != null)
                {
                    @foreach (var participant in ViewBag.Participants)
                    {
                        <option value="@participant.Id">@participant.User.UserName</option>
                    }
                }
            </select>
            <textarea id="questionText" placeholder="Sorunuzu yazın..."></textarea>
            <button onclick="askQuestion()">Soru Sor</button>
        </div>
        
        <div class="voting-panel" id="votingPanel" style="display: none;">
            <h4>Oy Ver</h4>
            <div id="votingOptions"></div>
        </div>
        
        <div class="chat-panel">
            <div class="chat-messages" id="chatMessages"></div>
            <div class="chat-input">
                <input type="text" id="chatInput" placeholder="Mesajınızı yazın...">
                <button onclick="sendMessage()">Gönder</button>
            </div>
        </div>
        
        <div class="game-controls">
            <button onclick="showRole()">Rolünü Göster</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.min.js"></script>
    <script>
        // Oyun değişkenleri
        let game;
        let players = [];
        let myPlayer = null;
        let currentQuestion = null;
        let votingEnabled = false;
        let gameSession = @Html.Raw(Json.Serialize(ViewBag.GameSession));
        let roomCode = '@ViewBag.Room.RoomCode';
        let myUserId = @User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? 0;
        let myUserName = '@User.Identity?.Name';
        
        // Timer
        let gameTimer;
        let timeRemaining = gameSession?.DurationSeconds || 480;
        
        // Oyun konfigürasyonu
        const config = {
            type: Phaser.AUTO,
            parent: 'gameCanvas',
            width: 800,
            height: 600,
            backgroundColor: '#1a1a2e',
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 0 },
                    debug: false
                }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            },
            scale: {
                mode: Phaser.Scale.FIT,
                autoCenter: Phaser.Scale.CENTER_BOTH
            }
        };
        
        // Oyun başlatma
        function startGame() {
            if (game) {
                game.destroy(true);
            }
            game = new Phaser.Game(config);
        }
        
        function preload() {
            // Basit oyuncu sprite'ı oluştur - daha iyi görünüm için
            const graphics = this.add.graphics();
            
            // Oyuncu gövdesi (daha büyük ve detaylı)
            graphics.fillStyle(0x00ff00);
            graphics.fillCircle(25, 25, 25);
            
            // Oyuncu gözleri
            graphics.fillStyle(0x000000);
            graphics.fillCircle(20, 20, 3);
            graphics.fillCircle(30, 20, 3);
            
            // Oyuncu ağzı
            graphics.fillStyle(0x000000);
            graphics.fillRect(22, 32, 6, 2);
            
            graphics.generateTexture('player', 50, 50);
            graphics.destroy();
            
            // Basit mekan tasarımı - zemin
            const groundGraphics = this.add.graphics();
            groundGraphics.fillStyle(0x2d2d2d);
            groundGraphics.fillRect(0, 0, 800, 600);
            
            // Zemin desenleri
            groundGraphics.fillStyle(0x3d3d3d);
            for (let i = 0; i < 800; i += 50) {
                for (let j = 0; j < 600; j += 50) {
                    if ((i + j) % 100 === 0) {
                        groundGraphics.fillRect(i, j, 50, 50);
                    }
                }
            }
            
            groundGraphics.generateTexture('ground', 800, 600);
            groundGraphics.destroy();
        }
        
        function create() {
            // Zemin ekle
            this.add.image(400, 300, 'ground');
            
            // Oyuncuları oluştur
            const playerData = @Html.Raw(Json.Serialize(ViewBag.PlayerPositions));
            const participants = @Html.Raw(Json.Serialize(ViewBag.Participants));
            
            if (playerData && participants) {
                playerData.forEach((pos, index) => {
                    const participant = participants.find(p => p.Id === pos.RoomParticipantId);
                    if (participant) {
                        const player = this.add.sprite(pos.X, pos.Y, 'player');
                        player.setTint(parseInt(pos.Color.replace('#', '0x')));
                        player.setData('id', pos.RoomParticipantId);
                        player.setData('name', participant.User.UserName);
                        player.setData('color', pos.Color);
                        
                        // Oyuncu adı
                        this.add.text(pos.X, pos.Y - 40, participant.User.UserName, {
                            fontSize: '14px',
                            fill: '#ffffff',
                            stroke: '#000000',
                            strokeThickness: 2
                        }).setOrigin(0.5);
                        
                        players.push(player);
                        
                        // Benim oyuncum mu?
                        if (participant.UserId == myUserId) {
                            myPlayer = player;
                            setupPlayerControls();
                        }
                    }
                });
            }
            
            // Timer başlat
            startTimer();
            
            // Oyun durumunu kontrol et
            checkGameState();
        }
        
        function update() {
            if (myPlayer) {
                handlePlayerMovement();
            }
        }
        
        function setupPlayerControls() {
            this.cursors = this.input.keyboard.createCursorKeys();
            this.wasd = this.input.keyboard.addKeys('W,A,S,D');
        }
        
        function handlePlayerMovement() {
            let velocityX = 0;
            let velocityY = 0;
            
            if (this.cursors.left.isDown || this.wasd.A.isDown) {
                velocityX = -160;
            } else if (this.cursors.right.isDown || this.wasd.D.isDown) {
                velocityX = 160;
            }
            
            if (this.cursors.up.isDown || this.wasd.W.isDown) {
                velocityY = -160;
            } else if (this.cursors.down.isDown || this.wasd.S.isDown) {
                velocityY = 160;
            }
            
            myPlayer.setVelocity(velocityX, velocityY);
            
            // Pozisyonu sunucuya gönder
            updatePlayerPosition(myPlayer.x, myPlayer.y);
        }
        
        function updatePlayerPosition(x, y) {
            fetch('/Room/UpdatePosition', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    roomCode: roomCode,
                    x: x,
                    y: y
                })
            });
        }
        
        function startTimer() {
            // Timer'ı başlat - süreyi doğru şekilde ayarla
            if (gameSession && gameSession.DurationSeconds) {
                timeRemaining = gameSession.DurationSeconds;
            }
            
            // Timer'ı hemen güncelle
            updateTimerDisplay();
            
            // Timer'ı başlat
            if (gameTimer) {
                clearInterval(gameTimer);
            }
            
            gameTimer = setInterval(() => {
                timeRemaining--;
                updateTimerDisplay();
                
                if (timeRemaining <= 0) {
                    clearInterval(gameTimer);
                    finishGameByTimeout();
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            const timeDisplay = document.getElementById('timeRemaining');
            if (timeDisplay) {
                timeDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
        }
        
        function checkGameState() {
            if (gameSession?.CurrentQuestionerId) {
                const currentPlayer = players.find(p => p.getData('id') === gameSession.CurrentQuestionerId);
                if (currentPlayer && currentPlayer === myPlayer) {
                    showQuestionForm();
                }
            }
            
            if (gameSession?.CurrentQuestion) {
                showQuestion(gameSession.CurrentQuestion, gameSession.CurrentAnswer);
            }
            
            if (gameSession?.VotingEnabled) {
                enableVoting();
            }
        }
        
        function showQuestionForm() {
            document.getElementById('questionForm').style.display = 'block';
            document.getElementById('questionPanel').style.display = 'none';
        }
        
        function showQuestion(question, answer) {
            document.getElementById('currentQuestion').innerText = `Soru: ${question}`;
            document.getElementById('currentAnswer').innerText = `Cevap: ${answer}`;
            document.getElementById('questionPanel').style.display = 'block';
        }
        
        function askQuestion() {
            const targetPlayerId = document.getElementById('targetPlayer').value;
            const questionText = document.getElementById('questionText').value;
            
            if (!questionText || !targetPlayerId) {
                alert('Lütfen bir soru yazın ve hedef oyuncu seçin.');
                return;
            }
            
            fetch('/Room/AskQuestion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    code: roomCode,
                    question: questionText,
                    targetParticipantId: parseInt(targetPlayerId)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Soru başarıyla gönderildi. Cevap: ' + data.answer);
                    document.getElementById('questionPanel').style.display = 'block';
                    document.getElementById('currentQuestion').innerText = `Soru: ${questionText}`;
                    document.getElementById('currentAnswer').innerText = `Cevap: ${data.answer}`;
                    document.getElementById('questionForm').style.display = 'none';
                } else {
                    alert('Hata: ' + data.message);
                }
            })
            .catch(error => console.error('Soru sorma hatası:', error));
        }
        
        function enableVoting() {
            const participants = @Html.Raw(Json.Serialize(ViewBag.Participants));
            const votingOptions = document.getElementById('votingOptions');
            votingOptions.innerHTML = '';
            
            participants.forEach(participant => {
                const button = document.createElement('button');
                button.innerText = participant.User.UserName;
                button.onclick = () => vote(participant.Id);
                votingOptions.appendChild(button);
            });
            
            document.getElementById('votingPanel').style.display = 'block';
        }
        
        function vote(targetParticipantId) {
            fetch('/Room/Vote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    code: roomCode,
                    targetParticipantId: targetParticipantId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Oyunuz kaydedildi.');
                    document.getElementById('votingPanel').style.display = 'none';
                } else {
                    alert('Hata: ' + data.message);
                }
            })
            .catch(error => console.error('Oylama hatası:', error));
        }
        
        function sendMessage() {
            const messageInput = document.getElementById('chatInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            fetch('/Room/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    roomCode: roomCode,
                    message: message
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    messageInput.value = '';
                    // Mesajı UI'a ekle - gönderen adıyla birlikte
                    const chatMessagesDiv = document.getElementById('chatMessages');
                    const newMessage = document.createElement('div');
                    newMessage.className = 'chat-message';
                    newMessage.innerHTML = `<span class="sender">${myUserName}:</span> ${message}`;
                    chatMessagesDiv.appendChild(newMessage);
                    chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
                } else {
                    console.error('Mesaj gönderilemedi:', data.message);
                }
            })
            .catch(error => console.error('Mesaj gönderme hatası:', error));
        }
        
        function showRole() {
            // Sadece kendi rolünü göster
            window.open(`/Room/ShowRole?code=${roomCode}`, '_blank');
        }
        
        function finishGameByTimeout() {
            fetch('/Room/FinishByTimeout', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    code: roomCode
                })
            }).then(() => {
                alert('Süre doldu! Casus kazandı.');
                window.location.href = '/Room/Lobby?code=' + roomCode;
            });
        }
        
        // Eşzamanlı güncelleme için interval
        let positionUpdateInterval;
        
        // Oyunu başlat
        document.addEventListener('DOMContentLoaded', function() {
            // Timer'ı başlat
            if (gameSession && gameSession.DurationSeconds) {
                timeRemaining = gameSession.DurationSeconds;
                updateTimerDisplay();
            }
            
            // Canvas'ın yüklenmesini bekle
            setTimeout(() => {
                startGame();
            }, 100);
            
            // Enter tuşu ile mesaj gönder
            document.getElementById('chatInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Periyodik olarak oyun durumunu güncelle (3 saniyede bir)
            positionUpdateInterval = setInterval(updateGameState, 3000);
        });
        
        function updateGameState() {
            fetch('/Room/GetGameState?code=' + roomCode)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Diğer oyuncuların pozisyonlarını güncelle
                        updateOtherPlayersPositions(data.playerPositions);
                        
                        // Oyun durumunu güncelle
                        if (data.gameSession) {
                            gameSession = data.gameSession;
                            
                            // Timer'ı güncelle
                            if (gameSession.DurationSeconds && !gameTimer) {
                                timeRemaining = gameSession.DurationSeconds;
                                startTimer();
                            }
                            
                            checkGameState();
                        }
                        
                        // Chat mesajlarını güncelle
                        if (data.chatMessages) {
                            updateChatMessages(data.chatMessages);
                        }
                    }
                })
                .catch(error => console.error('Oyun durumu güncellenirken hata:', error));
        }
        
        function updateOtherPlayersPositions(positions) {
            positions.forEach(pos => {
                const player = players.find(p => p.getData('id') === pos.RoomParticipantId);
                if (player && player !== myPlayer && game && game.scene.scenes[0]) {
                    // Yumuşak geçiş ile pozisyon güncelle
                    game.scene.scenes[0].tweens.add({
                        targets: player,
                        x: pos.X,
                        y: pos.Y,
                        duration: 1000,
                        ease: 'Power2'
                    });
                }
            });
        }
        
        function updateChatMessages(messages) {
            const chatMessagesDiv = document.getElementById('chatMessages');
            chatMessagesDiv.innerHTML = '';
            
            messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'chat-message';
                messageDiv.innerHTML = `<span class="sender">${msg.senderName}:</span> ${msg.message}`;
                chatMessagesDiv.appendChild(messageDiv);
            });
            
            chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
        }
    </script>
} 